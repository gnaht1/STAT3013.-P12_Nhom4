# In kết quả dự đoán cho 30 ngày tiếp theo
print("Dự đoán giá vàng cho 30 ngày tiếp theo:")
print(next_30_days)
# Tính toán các chỉ số đánh giá mô hình cho tập kiểm tra và kiểm định
calculate_metrics <- function(model, data) {
predicted <- predict(model, newdata = data)
actual <- data$close
rmse_value <- rmse(actual, predicted)
mae_value <- mae(actual, predicted)
mape_value <- mape(actual, predicted)
return(list(RMSE = rmse_value, MAE = mae_value, MAPE = mape_value))
}
# Tính các chỉ số cho tập huấn luyện, kiểm tra và kiểm định
train_metrics <- calculate_metrics(model, train_7_2_1)
test_metrics <- calculate_metrics(model, test_7_2_1)
validation_metrics <- calculate_metrics(model, validation_7_2_1)
# In các chỉ số đánh giá
print("Chỉ số đánh giá cho tập huấn luyện:")
print(train_metrics)
print("Chỉ số đánh giá cho tập kiểm tra:")
print(test_metrics)
print("Chỉ số đánh giá cho tập kiểm định:")
print(validation_metrics)
# Vẽ đồ thị dự đoán giá vàng cho 30 ngày tiếp theo
plot_predictions <- function(original_data, next_30_days, title) {
ggplot() +
geom_line(data = original_data, aes(x = index, y = close), color = "blue") +
geom_line(data = next_30_days, aes(x = index, y = predicted_close), color = "red") +
labs(title = title, x = "Index", y = "Gold Price")
}
# Vẽ đồ thị dự đoán cho 30 ngày tiếp theo
plot_predictions(df, next_30_days, "Dự đoán giá vàng cho 30 ngày tiếp theo")
# Đọc dữ liệu từ file Excel
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
df$index <- 1:nrow(df)
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
# Chia dữ liệu theo tỷ lệ 7:2:1 giống như trong Python
train_size <- floor(0.7 * nrow(df))
test_size <- floor(0.2 * nrow(df))
val_size <- nrow(df) - train_size - test_size
train_data <- df[1:train_size, ]
test_data <- df[(train_size + 1):(train_size + test_size), ]
val_data <- df[(train_size + test_size + 1):nrow(df), ]
# Huấn luyện mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_data)
# In thông tin chi tiết về mô hình để kiểm tra hệ số hồi quy
print(summary(model))
# Dự đoán giá trị cho tập kiểm tra
test_data$predicted_close <- predict(model, newdata = test_data)
# Dự đoán giá trị cho tập kiểm định
val_data$predicted_close <- predict(model, newdata = val_data)
# Tạo dữ liệu dự đoán cho 30 ngày tiếp theo
last_index <- max(df$index)
next_30_days <- data.frame(index = (last_index + 1):(last_index + 30))
next_30_days$index_normalized <- (next_30_days$index - mean_index) / std_index
next_30_days$predicted_close <- predict(model, newdata = next_30_days)
# In kết quả dự đoán cho 30 ngày tiếp theo
print("Dự đoán giá vàng cho 30 ngày tiếp theo:")
print(next_30_days)
# Tính toán các chỉ số đánh giá mô hình cho tập huấn luyện, kiểm tra và kiểm định
calculate_metrics <- function(actual, predicted) {
rmse_value <- rmse(actual, predicted)
mae_value <- mae(actual, predicted)
mape_value <- mape(actual, predicted)
return(list(RMSE = rmse_value, MAE = mae_value, MAPE = mape_value))
}
# Tính các chỉ số cho tập huấn luyện, kiểm tra và kiểm định
train_metrics <- calculate_metrics(train_data$close, predict(model, newdata = train_data))
test_metrics <- calculate_metrics(test_data$close, test_data$predicted_close)
val_metrics <- calculate_metrics(val_data$close, val_data$predicted_close)
# In các chỉ số đánh giá
print("Chỉ số đánh giá cho tập huấn luyện:")
print(train_metrics)
print("Chỉ số đánh giá cho tập kiểm tra:")
print(test_metrics)
print("Chỉ số đánh giá cho tập kiểm định:")
print(val_metrics)
# Vẽ đồ thị dự đoán giá vàng cho 30 ngày tiếp theo
plot_predictions <- function(original_data, next_30_days, title) {
ggplot() +
geom_line(data = original_data, aes(x = index, y = close), color = "blue") +
geom_line(data = next_30_days, aes(x = index, y = predicted_close), color = "red") +
labs(title = title, x = "Index", y = "Gold Price")
}
# Vẽ đồ thị dự đoán cho 30 ngày tiếp theo
plot_predictions(df, next_30_days, "Dự đoán giá vàng cho 30 ngày tiếp theo")
View(df)
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
df$index <- 1:nrow(df)
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
# Chia dữ liệu theo tỷ lệ 7:2:1 giống như trong Python
train_size <- floor(0.7 * nrow(df))
test_size <- floor(0.2 * nrow(df))
val_size <- nrow(df) - train_size - test_size
train_data <- df[1:train_size, ]
test_data <- df[(train_size + 1):(train_size + test_size), ]
val_data <- df[(train_size + test_size + 1):nrow(df), ]
# Huấn luyện mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_data)
# In thông tin chi tiết về mô hình để kiểm tra hệ số hồi quy
print(summary(model))
# Dự đoán giá trị cho tập kiểm tra
test_data$predicted_close <- predict(model, newdata = test_data)
# Dự đoán giá trị cho tập kiểm định
val_data$predicted_close <- predict(model, newdata = val_data)
# Tạo dữ liệu dự đoán cho 30 ngày tiếp theo
last_index <- max(df$index)
next_30_days <- data.frame(index = (last_index + 1):(last_index + 30))
next_30_days$index_normalized <- (next_30_days$index - mean_index) / std_index
next_30_days$predicted_close <- predict(model, newdata = next_30_days)
# In kết quả dự đoán cho 30 ngày tiếp theo
print("Dự đoán giá vàng cho 30 ngày tiếp theo:")
print(next_30_days)
# Tính toán các chỉ số đánh giá mô hình cho tập huấn luyện, kiểm tra và kiểm định
calculate_metrics <- function(actual, predicted) {
rmse_value <- rmse(actual, predicted)
mae_value <- mae(actual, predicted)
mape_value <- mape(actual, predicted)
return(list(RMSE = rmse_value, MAE = mae_value, MAPE = mape_value))
}
# Tính các chỉ số cho tập huấn luyện, kiểm tra và kiểm định
train_metrics <- calculate_metrics(train_data$close, predict(model, newdata = train_data))
test_metrics <- calculate_metrics(test_data$close, test_data$predicted_close)
val_metrics <- calculate_metrics(val_data$close, val_data$predicted_close)
# In các chỉ số đánh giá
print("Chỉ số đánh giá cho tập huấn luyện:")
print(train_metrics)
print("Chỉ số đánh giá cho tập kiểm tra:")
print(test_metrics)
print("Chỉ số đánh giá cho tập kiểm định:")
print(val_metrics)
# Vẽ đồ thị dự đoán giá vàng cho 30 ngày tiếp theo
plot_predictions <- function(original_data, next_30_days, title) {
ggplot() +
geom_line(data = original_data, aes(x = index, y = close), color = "blue") +
geom_line(data = next_30_days, aes(x = index, y = predicted_close), color = "red") +
labs(title = title, x = "Index", y = "Gold Price")
}
# Vẽ đồ thị dự đoán cho 30 ngày tiếp theo
plot_predictions(df, next_30_days, "Dự đoán giá vàng cho 30 ngày tiếp theo")
print(coef(model))  # In ra hệ số hồi quy của mô hình trong R
library(caTools)
library(readxl)
library(Metrics)
library(ggplot2)
# Đọc dữ liệu từ file Excel
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
df$index <- 1:nrow(df)
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
# Chia dữ liệu theo tỷ lệ 7:2:1 giống như trong Python
train_size <- floor(0.7 * nrow(df))
test_size <- floor(0.2 * nrow(df))
val_size <- nrow(df) - train_size - test_size
train_data <- df[1:train_size, ]
test_data <- df[(train_size + 1):(train_size + test_size), ]
val_data <- df[(train_size + test_size + 1):nrow(df), ]
# Huấn luyện mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_data)
# In thông tin chi tiết về mô hình để kiểm tra hệ số hồi quy
print(summary(model))
# Dự đoán giá trị cho tập kiểm tra
test_data$predicted_close <- predict(model, newdata = test_data)
# Dự đoán giá trị cho tập kiểm định
val_data$predicted_close <- predict(model, newdata = val_data)
# Tạo dữ liệu dự đoán cho 30 ngày tiếp theo
last_index <- max(df$index)
next_30_days <- data.frame(index = (last_index + 1):(last_index + 30))
next_30_days$index_normalized <- (next_30_days$index - mean_index) / std_index
next_30_days$predicted_close <- predict(model, newdata = next_30_days)
# In kết quả dự đoán cho 30 ngày tiếp theo
print("Dự đoán giá vàng cho 30 ngày tiếp theo:")
print(next_30_days)
# Tính toán các chỉ số đánh giá mô hình cho tập huấn luyện, kiểm tra và kiểm định
calculate_metrics <- function(actual, predicted) {
rmse_value <- rmse(actual, predicted)
mae_value <- mae(actual, predicted)
mape_value <- mape(actual, predicted)
return(list(RMSE = rmse_value, MAE = mae_value, MAPE = mape_value))
}
# Tính các chỉ số cho tập huấn luyện, kiểm tra và kiểm định
train_metrics <- calculate_metrics(train_data$close, predict(model, newdata = train_data))
test_metrics <- calculate_metrics(test_data$close, test_data$predicted_close)
val_metrics <- calculate_metrics(val_data$close, val_data$predicted_close)
# In các chỉ số đánh giá
print("Chỉ số đánh giá cho tập huấn luyện:")
print(train_metrics)
print("Chỉ số đánh giá cho tập kiểm tra:")
print(test_metrics)
print("Chỉ số đánh giá cho tập kiểm định:")
print(val_metrics)
# Vẽ đồ thị dự đoán giá vàng cho 30 ngày tiếp theo
plot_predictions <- function(original_data, next_30_days, title) {
ggplot() +
geom_line(data = original_data, aes(x = index, y = close), color = "blue") +
geom_line(data = next_30_days, aes(x = index, y = predicted_close), color = "red") +
labs(title = title, x = "Index", y = "Gold Price")
}
# Vẽ đồ thị dự đoán cho 30 ngày tiếp theo
plot_predictions(df, next_30_days, "Dự đoán giá vàng cho 30 ngày tiếp theo")
# Đọc dữ liệu từ file Excel
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
set.seed(123)  # Thiết lập seed giống Python
indices <- sample(1:nrow(df))
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
residuals_r <- residuals(model)
print(residuals_r)
y_mean <- mean(train_data$close)
tss_r <- sum((train_data$close - y_mean)^2)
rss_r <- sum(residuals(model)^2)
print(paste("TSS (R):", tss_r))
print(paste("RSS (R):", rss_r))
r_squared_r <- 1 - (rss_r / tss_r)
print(paste("R-squared (Manual, R):", r_squared_r))
rounded_residuals <- round(residuals_r, digits = 8)
rounded_residuals
tss_r <- round(sum((train_data$close - y_mean)^2), 8)
rss_r <- round(sum(residuals(model)^2), 8)
r_squared_r <- round(1 - (rss_r / tss_r), 8)
print(paste("R-squared (Manual, R):", r_squared_r))
# Tính giá trị trung bình của biến phụ thuộc
y_mean <- mean(train_data$close)
# Tính Total Sum of Squares (TSS)
tss_r <- sum((train_data$close - y_mean)^2)
# Tính Residual Sum of Squares (RSS)
predicted_train <- predict(model, newdata = train_data)
rss_r <- sum((train_data$close - predicted_train)^2)
# Tính R-squared thủ công
r_squared_r <- 1 - (rss_r / tss_r)
print(paste("R-squared (Manual, R):", round(r_squared_r, 8)))
# Load thư viện
library(caTools)
library(readxl)
library(Metrics)
library(ggplot2)
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
set.seed(123)  # Thiết lập seed giống Python
indices <- sample(1:nrow(df))
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
indices <- sample(1:nrow(df))
View(df)
View(df)
indices <- sample(1:nrow(df))
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Load thư viện
library(caTools)
library(readxl)
library(Metrics)
library(ggplot2)
# Đọc dữ liệu từ file Excel
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
View(df)
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
library(caTools)
library(readxl)
library(Metrics)
library(ggplot2)
# Đọc dữ liệu từ file Excel
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
set.seed(123)  # Thiết lập seed giống Python
index <- sample(1:nrow(df))
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
# Load thư viện
library(caTools)
library(readxl)
library(Metrics)
library(ggplot2)
df <- read_excel("E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào, bắt đầu từ 1
set.seed(123)  # Thiết lập seed giống Python
indices <- sample(1:nrow(df))
# Hiển thị thông tin của bộ dữ liệu
print(head(df))
# Kiểm tra các giá trị thiếu
print(colSums(is.na(df)))
# Chuẩn hóa cột index để cải thiện hiệu suất mô hình
mean_index <- mean(df$index)
std_index <- sd(df$index)
df$index_normalized <- (df$index - mean_index) / std_index
library(caTools)
library(readxl)
# Đọc dữ liệu từ file Excel
df <- read_excel("E:\\Code\\STAT3013.-P12_Nhom4\\Dataset\\Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào
df$index <- 1:nrow(df)
# Đặt seed để kết quả có thể tái hiện
set.seed(123)
# Chia dữ liệu theo tỷ lệ 7:2:1
split_7_2_1 <- sample.split(df$close, SplitRatio = 0.7)
train_7_2_1 <- subset(df, split_7_2_1 == TRUE)
remaining_7_2_1 <- subset(df, split_7_2_1 == FALSE)
split_2 <- sample.split(remaining_7_2_1$close, SplitRatio = 2/3)
test_7_2_1 <- subset(remaining_7_2_1, split_2 == TRUE)
validation_7_2_1 <- subset(remaining_7_2_1, split_2 == FALSE)
# Chia dữ liệu theo tỷ lệ 6:3:1
split_6_3_1 <- sample.split(df$close, SplitRatio = 0.6)
train_6_3_1 <- subset(df, split_6_3_1 == TRUE)
remaining_6_3_1 <- subset(df, split_6_3_1 == FALSE)
split_3 <- sample.split(remaining_6_3_1$close, SplitRatio = 3/4)
test_6_3_1 <- subset(remaining_6_3_1, split_3 == TRUE)
validation_6_3_1 <- subset(remaining_6_3_1, split_3 == FALSE)
# Chia dữ liệu theo tỷ lệ 5:3:2
split_5_3_2 <- sample.split(df$close, SplitRatio = 0.5)
train_5_3_2 <- subset(df, split_5_3_2 == TRUE)
remaining_5_3_2 <- subset(df, split_5_3_2 == FALSE)
split_3 <- sample.split(remaining_5_3_2$close, SplitRatio = 3/5)
test_5_3_2 <- subset(remaining_5_3_2, split_3 == TRUE)
validation_5_3_2 <- subset(remaining_5_3_2, split_3 == FALSE)
# Tạo hàm để huấn luyện mô hình, in summary và dự đoán giá vàng 30 ngày tiếp theo
predict_next_30_days <- function(train_data, original_data) {
# Huấn luyện mô hình hồi quy tuyến tính sử dụng cột index
model <- lm(close ~ index, data = train_data)
# In thông tin chi tiết về mô hình
print(summary(model))
# Tạo dữ liệu dự đoán cho 30 ngày tiếp theo
last_index <- max(train_data$index)
next_30_days <- data.frame(index = (last_index + 1):(last_index + 30))
# Dự đoán giá vàng
next_30_days$predicted_close <- predict(model, newdata = next_30_days)
# Trả về kết quả dự đoán
return(next_30_days)
}
# Dự đoán và in summary cho các tỷ lệ chia dữ liệu
print("Tóm tắt mô hình cho tỷ lệ 7:2:1:")
next_30_days_7_2_1 <- predict_next_30_days(train_7_2_1, df)
print("Tóm tắt mô hình cho tỷ lệ 6:3:1:")
next_30_days_6_3_1 <- predict_next_30_days(train_6_3_1, df)
print("Tóm tắt mô hình cho tỷ lệ 5:3:2:")
next_30_days_5_3_2 <- predict_next_30_days(train_5_3_2, df)
# Hiển thị kết quả dự đoán
print("Dự đoán giá vàng 30 ngày tiếp theo cho tỷ lệ 7:2:1:")
print(next_30_days_7_2_1)
print("Dự đoán giá vàng 30 ngày tiếp theo cho tỷ lệ 6:3:1:")
print(next_30_days_6_3_1)
print("Dự đoán giá vàng 30 ngày tiếp theo cho tỷ lệ 5:3:2:")
print(next_30_days_5_3_2)
# Vẽ đồ thị cho từng tập dự đoán
library(ggplot2)
plot_predictions <- function(original_data, next_30_days, title) {
ggplot() +
geom_line(data = original_data, aes(x = index, y = close), color = "blue") +
geom_line(data = next_30_days, aes(x = index, y = predicted_close), color = "red") +
labs(title = title, x = "Index", y = "Gold Price")
}
# Vẽ đồ thị cho từng tỷ lệ chia
plot_predictions(df, next_30_days_7_2_1, "Gold price for the next 30 days (Scale 7:2:1)")
plot_predictions(df, next_30_days_6_3_1, "Gold price for the next 30 days (Scale 6:3:1)")
plot_predictions(df, next_30_days_5_3_2, "Gold price for the next 30 days (Scale 5:3:2)")
# Đọc dữ liệu từ file Excel
df <- read_excel("E:\\Code\\STAT3013.-P12_Nhom4\\Dataset\\Gold_data_filtered.xlsx")
# Chuẩn hóa cột index để có trung bình = 0 và phương sai = 1
mean_index <- mean(df$index, na.rm = TRUE)
# Đọc dữ liệu từ file Excel
df <- read_excel("E:\\Code\\STAT3013.-P12_Nhom4\\Dataset\\Gold_data_filtered.xlsx")
# Thêm cột index để sử dụng làm biến đầu vào
df$index <- 1:nrow(df)
# Chuẩn hóa cột index để có trung bình = 0 và phương sai = 1
mean_index <- mean(df$index, na.rm = TRUE)
sd_index <- sd(df$index, na.rm = TRUE)
df$index_normalized <- (df$index - mean_index) / sd_index
# Đặt seed để kết quả có thể tái hiện
set.seed(123)
# Chia dữ liệu theo tỷ lệ 7:2:1
split_7_2_1 <- sample.split(df$close, SplitRatio = 0.7)
train_7_2_1 <- subset(df, split_7_2_1 == TRUE)
remaining_7_2_1 <- subset(df, split_7_2_1 == FALSE)
split_remaining <- sample.split(remaining_7_2_1$close, SplitRatio = 0.6667)
test_2 <- subset(remaining_7_2_1, split_remaining == TRUE)
validation_1 <- subset(remaining_7_2_1, split_remaining == FALSE)
# Xây dựng mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_7_2_1)
# Đánh giá mô hình trên tập kiểm tra
predictions <- predict(model, newdata = test_2)
# Tính toán các chỉ số đánh giá mô hình
mae <- mean(abs(predictions - test_2$close))
rmse <- sqrt(mean((predictions - test_2$close)^2))
# In ra kết quả
print(paste("MAE:", mae))
print(paste("RMSE:", rmse))
# Chuẩn hóa cột index để có trung bình = 0 và phương sai = 1
mean_index <- mean(df$index, na.rm = TRUE)
sd_index <- sd(df$index, na.rm = TRUE)
df$index_normalized <- (df$index - mean_index) / sd_index
# Đặt seed để kết quả có thể tái hiện
set.seed(123)
# Chia dữ liệu theo tỷ lệ 7:2:1
split_7_2_1 <- sample.split(df$close, SplitRatio = 0.7)
train_7_2_1 <- subset(df, split_7_2_1 == TRUE)
remaining_7_2_1 <- subset(df, split_7_2_1 == FALSE)
split_remaining <- sample.split(remaining_7_2_1$close, SplitRatio = 0.6667)
test_2 <- subset(remaining_7_2_1, split_remaining == TRUE)
validation_1 <- subset(remaining_7_2_1, split_remaining == FALSE)
# Xây dựng mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_7_2_1)
# Đánh giá mô hình trên tập kiểm tra
predictions <- predict(model, newdata = test_2)
# Tính toán các chỉ số đánh giá mô hình
mae <- mean(abs(predictions - test_2$close))
rmse <- sqrt(mean((predictions - test_2$close)^2))
# In ra kết quả
print(paste("MAE:", mae))
print(paste("RMSE:", rmse))
_
# Thêm cột index để sử dụng làm biến đầu vào
df$index <- 1:nrow(df)
# Chuẩn hóa cột index để có trung bình = 0 và phương sai = 1
mean_index <- mean(df$index, na.rm = TRUE)
sd_index <- sd(df$index, na.rm = TRUE)
df$index_normalized <- (df$index - mean_index) / sd_index
# Đặt seed để kết quả có thể tái hiện
set.seed(123)
# Chia dữ liệu theo tỷ lệ 7:2:1
split_7_2_1 <- sample.split(df$close, SplitRatio = 0.7)
train_7_2_1 <- subset(df, split_7_2_1 == TRUE)
remaining_7_2_1 <- subset(df, split_7_2_1 == FALSE)
split_remaining <- sample.split(remaining_7_2_1$close, SplitRatio = 0.6667)
test_2 <- subset(remaining_7_2_1, split_remaining == TRUE)
validation_1 <- subset(remaining_7_2_1, split_remaining == FALSE)
# Xây dựng mô hình hồi quy tuyến tính sử dụng cột index_normalized
model <- lm(close ~ index_normalized, data = train_7_2_1)
# Đánh giá mô hình trên tập kiểm tra
predictions <- predict(model, newdata = test_2)
# Tính toán các chỉ số đánh giá mô hình: MAE, RMSE, MAPE
mae <- mean(abs(predictions - test_2$close))
rmse <- sqrt(mean((predictions - test_2$close)^2))
mape <- mean(abs((predictions - test_2$close) / test_2$close)) * 100
# In ra kết quả MAE, RMSE, MAPE
print(paste("MAE:", mae))
print(paste("RMSE:", rmse))
print(paste("MAPE:", mape, "%"))
# Vẽ plot so sánh giá trị thực tế và giá trị dự đoán
plot(test_2$index_normalized, test_2$close, type = 'l', col = 'blue', lwd = 2,
main = "So sánh giá trị thực tế và giá trị dự đoán",
xlab = "Index (normalized)",
ylab = "Giá trị đóng cửa")
lines(test_2$index_normalized, predictions, col = 'red', lwd = 2)
legend("topright", legend = c("Thực tế", "Dự đoán"), col = c("blue", "red"), lwd = 2)
# Dự đoán giá trị 30 ngày tiếp theo
# Giả sử các giá trị 30 ngày tiếp theo là liên tiếp từ giá trị hiện tại
next_30_indexes <- max(df$index) + 1:max(30)
next_30_indexes_normalized <- (next_30_indexes - mean_index) / sd_index
# Tạo dataframe chứa index_normalized cho dự đoán
next_30_df <- data.frame(index_normalized = next_30_indexes_normalized)
next_30_predictions <- predict(model, newdata = next_30_df)
# In ra giá trị dự đoán cho 30 ngày tiếp theo
print("Dự đoán giá trị cho 30 ngày tiếp theo:")
print(next_30_predictions)
library(readr)
install.packages("readr")
library(readr)
library(ggplot2)
library(caret)
# Load the dataset
dataset <- read.csv('E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx')
library(readxl)
library(ggplot2)
library(caret)
# Load the dataset
dataset <- read_excel('E:/Code/STAT3013.-P12_Nhom4/Dataset/Gold_data_filtered.xlsx')
# Inspect the dataset
str(dataset)
summary(dataset)
# Inspect the dataset
str(dataset)
summary(dataset)
# Prepare the dataset for linear regression
# Assuming that the dataset has 'Date' and 'Price' columns
dataset$Date <- as.Date(dataset$Date, format="%Y-%m-%d")
